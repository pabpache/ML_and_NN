From: <Saved by Blink>
Snapshot-Content-Location: https://www.cse.unsw.edu.au/~cs9444/20T3/hw2/
Subject: COMP9444 Assignment 2
Date: Thu, 19 Aug 2021 13:06:57 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--3PdTwVB7h5aJL09diES5JSVOpWF9O2mzwAwnlgWIMV----"


------MultipartBoundary--3PdTwVB7h5aJL09diES5JSVOpWF9O2mzwAwnlgWIMV----
Content-Type: text/html
Content-ID: <frame-82D74B80B9C4ADF9BC71394CBF415B89@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.cse.unsw.edu.au/~cs9444/20T3/hw2/

<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN"><html><head><meta http-eq=
uiv=3D"Content-Type" content=3D"text/html; charset=3Dwindows-1252">
<title>COMP9444 Assignment 2</title>
</head>
<body lang=3D"EN">
<h2 align=3D"center">COMP9444 Neural Networks and Deep Learning</h2>
<h2 align=3D"center">Term 3, 2020</h2>
<h3 align=3D"center">Project 2 - Rating and Category Prediction</h3>
<p align=3D"center">
Due: Thursday 19 November, 23:59 pm
<br align=3D"center">
Marks: 30% of final assessment
</p><p>
</p><hr>

<h3>Introduction</h3>

For this assignment you will be writing a Pytorch program that learns to re=
ad
business reviews in text format and predict a rating (positive or negative)
associated with each review, as well as a business category=20
(0=3DRestaurants, 1=3DShopping, 2=3DHome Services, 3=3DHealth &amp; Medical=
, 4=3DAutomotive).

<h3>Getting Started</h3>

Copy the archive <a href=3D"https://www.cse.unsw.edu.au/~cs9444/20T3/hw2/hw=
2.zip"><code>hw2.zip</code></a> into your own filespace and unzip it.
This should create an <a href=3D"https://www.cse.unsw.edu.au/~cs9444/20T3/h=
w2/hw2/" <code=3D"">hw2</a> directory containing the main file
<code>hw2main.py</code>, configuration file <code>config.py</code>, skeleto=
n file <code>student.py</code> and
data file <code>train.json</code> .
Your task is to complete the file <code>student.py</code>
in such a way that it can be run in conjunction with <code>hw2main.py</code=
> by typing
<pre>   python3 hw2main.py
</pre>
You must NOT modify <code>hw2main.py</code> in any way.
You should only submit <code>student.py</code><br>
(If you wish, you can modify <code>config.py</code>
in order to switch between CPU and GPU usage)
<p>
The provided file <code>hw2main.py</code> handles the following:
</p><ul>
<li> Loading the data from <code>train.json</code>
</li><li> Splitting the data into training and validation sets (in the rati=
o specified by <code>trainValSplit</code>)
</li><li> Data Processing: strings are converted to lower case, and lengths
of the reviews are calculated and added to the dataset (this allows
for dynamic padding). You can optionally add your own
tokenization, preprocessing, postprocessing and stop_words.
(Note that none of this is necessarily required, but it is possible)
</li><li> Vectorization, using torchtext <code>GloVe</code> vectors 6B
</li><li> Batching, using the <code>BucketIterator()</code> prodived by tor=
chtext so as to=20
batch together reviews of similar length. This is not necessary for accurac=
y but will speed up training since the total sequence length can be reduced=
 for some batches.
</li></ul>
You should aim to keep your code backend-agnostic in the sense that
it can run on either a CPU or GPU.
This is generally achieved using the
<code>.to(device)</code> function.
If you do not have access to a GPU, you sohuld at least ensure that
your code runs correctly on a CPU.
<p></p>
Please take some time to read through <code>hw2main.py</code> and understan=
d what it does.

<h3>Constraints</h3>

We have tried to structure <code>hw2main.py</code>
so as to allow as much flexibility as possible
in the design of your <code>student.py</code> code.
You are free to create additional variables, functions, classes, etc.,
so long as your code runs correctly with <code>hw2main.py</code> unmodified=
,
and you are only using the approved packages
(i.e. those available on the CSE machines).

You must adhere to these constraints:

<ol type=3D"1">
<li>Your model must be defined in a class named <code>network</code>.</li>
<li>The <code>savedModel.pth</code> file you submit must be generated by th=
e
<code>student.py</code> file you submit.</li>
<li>Make sure you are using <code>PyTorch1.2</code> and <code>TorchText0.4<=
/code>
so that your <code>savedModel.pth</code> will have the correct format
to run on the CSE machines.
</li><li>Your submission (including <code>savedModel.pth</code>) must be un=
der 50MB and you cannot load any external assets in the network class.
</li><li>While you may train on a GPU, you must ensure your model is able t=
o be evaluated on a CPU.</li>
</ol>

The <code>GloVe</code> vectors are stored in a subdirectory called <code>.v=
ector_cache</code>.
You are restricted to using <code>GloVe</code> vectors 6B, but you are free=
 to specify the value of
dim (50, 100, 200 or 300).
If you are testing your trained model on the CSE machines,
you can save disk space by removing the <code>.vector_cache</code> subdirec=
tory
and then creating a symbolic link by typing:
<pre>ln -s /home/cs9444/public_html/20T3/hw2/.vector_cache .vector_cache
</pre>
<p>
You must ensure that we can load your code and test it.
This will involve importing your <code>student.py</code> file,
creating an instance of your <code>network</code> class,
restoring the parameters from your <code>savedModel.pth</code>,
loading our own test dataset, processing according to what you
specified in your <code>student.py</code> file,
and calculating accuracy and score.
</p><p>
You may NOT download or load data other than what we have provided. If we f=
ind your submitted model has been trained on external data you will receive=
 zero marks for the assignment.

</p><h3>Question</h3>

At the top of your code, in a block of comments, you must provide a brief a=
nswer (one or two paragraphs) to this Question:

<blockquote>
Briefly describe how your program works, and explain any design and trainin=
g decisions you made along the way.
</blockquote>

<h3>Marking Scheme</h3>

After submissions have closed, your code wil be run on a holdout test set (=
i.e. a set of reviews and ratings that we do not make available to you, but=
 which we will use to test your model).
Marks will be allocated as follows:
<ul>
<li> 12 marks for Algorithms, Style, Comments and Answer to the Question
</li><li> 18 marks based on performance on the (unseen) test set
</li></ul>
The performance mark will be a function of the Weighted score, which is:
<blockquote>
&nbsp; (1.0 =D7 Percentage with correct rating and correct category)<br>
 + (0.5 =D7 Percentage with correct category but incorrect rating)<br>
 + (0.1 =D7 Percentage with correct rating but incorrect category)
</blockquote>

<h3>Groups</h3>

<p>This assignment may be done individually, or in groups of two students.
Groups are determined by an SMS field called hw2group.
Every student has initially been assigned a unique hw2group which is "h"
followed by their studentID number, e.g. <code>h1234567</code>. If you
plan to complete the assignment individually, you don't need to do
anything (but, if you do create a group with only you as a member,
that's ok too). If you wish to form a group, go to the COMP9444 WebCMS
page and click on "Groups" in the left hand column, then click "Create".
Enter your Group Name and select the Group Type "hw2".
After creating a Group, click "Edit", search for the other member, and clic=
k
"Add". WebCMS assigns a unique group ID to each group, in the form of
"g" followed by six digits (e.g. <code>g012345</code>). We will periodicall=
y run a
script to load these values into SMS.
You must ensure there are no more than two members in your group,
and no-one is a member of two different groups.</p>

<h3>Submission</h3>

You should submit your trained model and Python code by typing
<pre>give cs9444 hw2 student.py savedModel.pth
</pre>
You must submit your trained model <code>savedModel.pth</code>
as well as the Python code <code>student.py</code>
<p>
In order to avoid technical problems,
you are strongly advised to submit from the command line,
and not via the give Web interface.
You can submit as many times as you like - later submissions by either grou=
p member will overwrite previous submissions by either group member. You ca=
n check that your submission has been received by using the following comma=
nd:</p>
<pre>9444 classrun -check
</pre>
<p>The submission deadline is Thursday 19 November, 23:59. 15% penalty will=
 be applied to the (maximum) mark for every 24 hours late after the deadlin=
e.</p>
<p>Additional information may be found in the <a href=3D"https://www.cse.un=
sw.edu.au/~cs9444/20T3/hw2/faq.shtml">FAQ</a> and will be considered as par=
t of the specification for the project. You should check this page regularl=
y.</p>

When you submit, the system will check that your model can be successfully =
loaded,
and evaluate it on data randomly chosen from a third dataset
(disjoint from <code>train.json</code> and also disjoint from the holdout t=
est set).

<h3>Common Questions:</h3>
<ul>
<li><p><strong>Can I train on the full dataset if I find it?</strong> No.
You should NOT attempt to reconstruct the test set by searching the Interne=
t.
We will retrain a random selection of submissions, as well as those achievi=
ng high accuracy.
If your code attempts to search or load external assets,
or we find a mismatch between your submittied code and saved model,
you will receive zero marks.

</p></li><li><p><strong>My model is only slightly larger than 50MB, can you=
 still accept it?</strong>
No, the 50MB limit is part of the assignment specification
and is quite generous. You should be able to get away with much less.</p></=
li>
<li><p><strong>Can we assume you will call <code>net.eval()</code> on our m=
odel prior to testing?</strong> Yes.</p>
</li>
<li><p><strong>Can we assume a max length on the reviews?</strong> No. But =
nothing will be significantly longer than=20
what is present in the training set.</p></li>
</ul>

<h3>General Advice:</h3>
<ul>
<li><p>If you find your training accuracy is high, but the submission accur=
acy is low, you are overfitting to the training data.</p></li>
<li>
Try to be methodical in your development.  Blindly modifying code,
looking at the output, then modifying again can cause you go around in
circles.  A better approach is to keep a record of what you have tried,
and what outcome you observed.  Decide on a hypothesis you want to
test, run an experiment and record the result.  Then move on to the
next idea.
</li><li><p>You should consider the submission test script to be the final =
arbiter with regard to whether a certain approach is valid. If you try some=
thing, and the submission test runs and you get a good accuracy then the ap=
proach is valid. If it causes errors then it is not valid.</p></li>
<li>
Do Not leave this assignment to the last minute.
Get started early, and submit early in order to ensure your code runs corre=
ctly.
Marks from automated testing are final.
You should aim to be
uploading your final submission at least two hours before the deadline.
It is likely that close to the deadline, the wait time on submission test r=
esults will
increase.
</li></ul>

<h3>Plagiarism Policy</h3>

Your program must be entirely your own work.
Plagiarism detection software will be used to compare all submissions pairw=
ise
and serious penalties will be applied, particularly in the case
of repeat offences.
<p>
<b>DO NOT COPY FROM OTHERS; DO NOT ALLOW ANYONE TO SEE YOUR CODE</b>
</p><p>
Please refer to the
<a href=3D"https://student.unsw.edu.au/plagiarism">UNSW Policy on Academic =
Integrity and Plagiarism</a>
if you require further clarification on this matter.
</p><p>
</p><p>
Good luck!
<br>
</p><hr>


</body></html>
------MultipartBoundary--3PdTwVB7h5aJL09diES5JSVOpWF9O2mzwAwnlgWIMV------
